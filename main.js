/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => main_default
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
function iu(prefix, word, suffix) {
  const combinedString = prefix + word + suffix;
  const urlRegex = /https?:\/\/[^\s]+/g;
  let match;
  while ((match = urlRegex.exec(combinedString)) !== null) {
    const url = match[0];
    const urlStartIndex = match.index;
    const urlEndIndex = urlStartIndex + url.length;
    const wordStartIndex = prefix.length;
    const wordEndIndex = prefix.length + word.length;
    if (wordStartIndex >= urlStartIndex && wordEndIndex <= urlEndIndex) {
      return true;
    }
  }
  if (prefix == null ? void 0 : prefix.replace(/\[.*?\]/g, "").includes("["))
    return true;
  if (suffix == null ? void 0 : suffix.replace(/\[\[.*?\]\]/g, "").replace(/\[.*?\]/g, "").includes("]"))
    return true;
  return false;
}
var main_default = class extends import_obsidian.Plugin {
  onload() {
    this.interval = setInterval(() => document.querySelectorAll(".backlink-pane").forEach((p) => {
      p.children[3].querySelectorAll(".search-result-file-match").forEach((m) => {
        var _a, _b;
        let a = m.querySelector(".search-result-file-matched-text");
        if (iu((_a = a.previousSibling) == null ? void 0 : _a.innerHTML, a.innerText, (_b = a.nextSibling) == null ? void 0 : _b.innerText))
          m.style.backgroundColor = "rgba(255, 0, 0, 0.1)";
      });
      if (p.children[2].childElementCount < 4) {
        let b = document.createElement("button");
        b.classList.add("link-all");
        b.textContent = "Link all";
        console.log("ck");
        b.addEventListener("click", (e) => {
          e.stopPropagation();
          p.children[3].querySelectorAll(".search-result-file-match").forEach((m) => {
            var _a, _b;
            let a = m.querySelector(".search-result-file-matched-text");
            if (!iu((_a = a.previousSibling) == null ? void 0 : _a.innerHTML, a.innerText, (_b = a.nextSibling) == null ? void 0 : _b.innerText))
              m.querySelector(".search-result-file-match-replace-button").click();
          });
        }, { capture: true });
        p.children[2].appendChild(b);
      }
    }), 500);
  }
  onunload() {
    clearInterval(this.interval);
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgUGx1Z2luIH0gZnJvbSAnb2JzaWRpYW4nO1xyXG5mdW5jdGlvbiBpdShwcmVmaXgsIHdvcmQsIHN1ZmZpeCkge1xyXG4gICAgY29uc3QgY29tYmluZWRTdHJpbmcgPSBwcmVmaXggKyB3b3JkICsgc3VmZml4O1xyXG4gICAgY29uc3QgdXJsUmVnZXggPSAvaHR0cHM/OlxcL1xcL1teXFxzXSsvZztcclxuXHJcbiAgICBsZXQgbWF0Y2g7XHJcbiAgICB3aGlsZSAoKG1hdGNoID0gdXJsUmVnZXguZXhlYyhjb21iaW5lZFN0cmluZykpICE9PSBudWxsKSB7XHJcbiAgICAgICAgY29uc3QgdXJsID0gbWF0Y2hbMF07XHJcbiAgICAgICAgY29uc3QgdXJsU3RhcnRJbmRleCA9IG1hdGNoLmluZGV4O1xyXG4gICAgICAgIGNvbnN0IHVybEVuZEluZGV4ID0gdXJsU3RhcnRJbmRleCArIHVybC5sZW5ndGg7XHJcblxyXG4gICAgICAgIC8vIGNoZWNrIHdvcmQgaW5kZXhcclxuICAgICAgICBjb25zdCB3b3JkU3RhcnRJbmRleCA9IHByZWZpeC5sZW5ndGg7XHJcbiAgICAgICAgY29uc3Qgd29yZEVuZEluZGV4ID0gcHJlZml4Lmxlbmd0aCArIHdvcmQubGVuZ3RoO1xyXG5cclxuICAgICAgICBpZiAod29yZFN0YXJ0SW5kZXggPj0gdXJsU3RhcnRJbmRleCAmJiB3b3JkRW5kSW5kZXggPD0gdXJsRW5kSW5kZXgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7IC8vIHdvcmQgaW4gVVJMXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cdGlmKHByZWZpeD8ucmVwbGFjZSgvXFxbLio/XFxdL2csICcnKS5pbmNsdWRlcygnWycpKSAvLyB3b3JkIGluIGxpbmtcclxuXHRcdHJldHVybiB0cnVlO1xyXG5cdGlmKHN1ZmZpeD8ucmVwbGFjZSgvXFxbXFxbLio/XFxdXFxdL2csICcnKS5yZXBsYWNlKC9cXFsuKj9cXF0vZywgJycpLmluY2x1ZGVzKCddJykpXHJcblx0XHRyZXR1cm4gdHJ1ZTtcclxuXHJcbiAgICByZXR1cm4gZmFsc2U7IC8vIHdvcmQgbm90IGluIFVSTCBub3IgbGlua1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBleHRlbmRzIFBsdWdpbiB7XHJcblx0b25sb2FkKCkge1xyXG5cdFx0dGhpcy5pbnRlcnZhbCA9IHNldEludGVydmFsKCgpID0+ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmJhY2tsaW5rLXBhbmUnKS5mb3JFYWNoKHA9PntcclxuXHRcdFx0cC5jaGlsZHJlblszXS5xdWVyeVNlbGVjdG9yQWxsKCcuc2VhcmNoLXJlc3VsdC1maWxlLW1hdGNoJykuZm9yRWFjaChtPT57XHJcblx0XHRcdFx0bGV0IGE9bS5xdWVyeVNlbGVjdG9yKCcuc2VhcmNoLXJlc3VsdC1maWxlLW1hdGNoZWQtdGV4dCcpOy8vYWxpYXNcclxuXHRcdFx0XHRpZihpdShhLnByZXZpb3VzU2libGluZz8uaW5uZXJIVE1MLGEuaW5uZXJUZXh0LGEubmV4dFNpYmxpbmc/LmlubmVyVGV4dCkpXHJcblx0XHRcdFx0XHRtLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICdyZ2JhKDI1NSwgMCwgMCwgMC4xKSc7XHJcblx0XHRcdH0pXHJcblx0XHRcdGlmKHAuY2hpbGRyZW5bMl0uY2hpbGRFbGVtZW50Q291bnQ8NCl7XHJcblx0XHRcdFx0bGV0IGI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XHJcblx0XHRcdFx0Yi5jbGFzc0xpc3QuYWRkKCdsaW5rLWFsbCcpO1xyXG5cdFx0XHRcdGIudGV4dENvbnRlbnQgPSAnTGluayBhbGwnO1xyXG5cdFx0XHRcdGNvbnNvbGUubG9nKCdjaycpO1xyXG5cdFx0XHRcdGIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlPT57XHJcblx0XHRcdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cdFx0XHRcdFx0cC5jaGlsZHJlblszXS5xdWVyeVNlbGVjdG9yQWxsKCcuc2VhcmNoLXJlc3VsdC1maWxlLW1hdGNoJykuZm9yRWFjaChtPT57XHJcblx0XHRcdFx0XHRcdGxldCBhPW0ucXVlcnlTZWxlY3RvcignLnNlYXJjaC1yZXN1bHQtZmlsZS1tYXRjaGVkLXRleHQnKTtcclxuXHRcdFx0XHRcdFx0aWYoIWl1KGEucHJldmlvdXNTaWJsaW5nPy5pbm5lckhUTUwsYS5pbm5lclRleHQsYS5uZXh0U2libGluZz8uaW5uZXJUZXh0KSlcclxuXHRcdFx0XHRcdFx0XHRtLnF1ZXJ5U2VsZWN0b3IoJy5zZWFyY2gtcmVzdWx0LWZpbGUtbWF0Y2gtcmVwbGFjZS1idXR0b24nKS5jbGljaygpO1xyXG5cdFx0XHRcdFx0fSlcclxuXHRcdFx0XHR9LHtjYXB0dXJlOiB0cnVlfSk7XHJcblx0XHRcdFx0cC5jaGlsZHJlblsyXS5hcHBlbmRDaGlsZChiKTtcclxuXHRcdFx0fVxyXG5cdFx0fSksNTAwKTtcclxuXHR9XHJcblx0b251bmxvYWQoKSB7XHJcblx0XHRjbGVhckludGVydmFsKHRoaXMuaW50ZXJ2YWwpO1xyXG5cdH1cclxufTtcclxuIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHNCQUF1QjtBQUN2QixTQUFTLEdBQUcsUUFBUSxNQUFNLFFBQVE7QUFDOUIsUUFBTSxpQkFBaUIsU0FBUyxPQUFPO0FBQ3ZDLFFBQU0sV0FBVztBQUVqQixNQUFJO0FBQ0osVUFBUSxRQUFRLFNBQVMsS0FBSyxjQUFjLE9BQU8sTUFBTTtBQUNyRCxVQUFNLE1BQU0sTUFBTSxDQUFDO0FBQ25CLFVBQU0sZ0JBQWdCLE1BQU07QUFDNUIsVUFBTSxjQUFjLGdCQUFnQixJQUFJO0FBR3hDLFVBQU0saUJBQWlCLE9BQU87QUFDOUIsVUFBTSxlQUFlLE9BQU8sU0FBUyxLQUFLO0FBRTFDLFFBQUksa0JBQWtCLGlCQUFpQixnQkFBZ0IsYUFBYTtBQUNoRSxhQUFPO0FBQUEsSUFDWDtBQUFBLEVBQ0o7QUFDSCxNQUFHLGlDQUFRLFFBQVEsWUFBWSxJQUFJLFNBQVM7QUFDM0MsV0FBTztBQUNSLE1BQUcsaUNBQVEsUUFBUSxnQkFBZ0IsSUFBSSxRQUFRLFlBQVksSUFBSSxTQUFTO0FBQ3ZFLFdBQU87QUFFTCxTQUFPO0FBQ1g7QUFFQSxJQUFPLGVBQVAsY0FBNkIsdUJBQU87QUFBQSxFQUNuQyxTQUFTO0FBQ1IsU0FBSyxXQUFXLFlBQVksTUFBSyxTQUFTLGlCQUFpQixnQkFBZ0IsRUFBRSxRQUFRLE9BQUc7QUFDdkYsUUFBRSxTQUFTLENBQUMsRUFBRSxpQkFBaUIsMkJBQTJCLEVBQUUsUUFBUSxPQUFHO0FBOUIxRTtBQStCSSxZQUFJLElBQUUsRUFBRSxjQUFjLGtDQUFrQztBQUN4RCxZQUFHLElBQUcsT0FBRSxvQkFBRixtQkFBbUIsV0FBVSxFQUFFLFlBQVUsT0FBRSxnQkFBRixtQkFBZSxTQUFTO0FBQ3RFLFlBQUUsTUFBTSxrQkFBa0I7QUFBQSxNQUM1QixDQUFDO0FBQ0QsVUFBRyxFQUFFLFNBQVMsQ0FBQyxFQUFFLG9CQUFrQixHQUFFO0FBQ3BDLFlBQUksSUFBRSxTQUFTLGNBQWMsUUFBUTtBQUNyQyxVQUFFLFVBQVUsSUFBSSxVQUFVO0FBQzFCLFVBQUUsY0FBYztBQUNoQixnQkFBUSxJQUFJLElBQUk7QUFDaEIsVUFBRSxpQkFBaUIsU0FBUyxPQUFHO0FBQzlCLFlBQUUsZ0JBQWdCO0FBQ2xCLFlBQUUsU0FBUyxDQUFDLEVBQUUsaUJBQWlCLDJCQUEyQixFQUFFLFFBQVEsT0FBRztBQTFDNUU7QUEyQ00sZ0JBQUksSUFBRSxFQUFFLGNBQWMsa0NBQWtDO0FBQ3hELGdCQUFHLENBQUMsSUFBRyxPQUFFLG9CQUFGLG1CQUFtQixXQUFVLEVBQUUsWUFBVSxPQUFFLGdCQUFGLG1CQUFlLFNBQVM7QUFDdkUsZ0JBQUUsY0FBYywwQ0FBMEMsRUFBRSxNQUFNO0FBQUEsVUFDcEUsQ0FBQztBQUFBLFFBQ0YsR0FBRSxFQUFDLFNBQVMsS0FBSSxDQUFDO0FBQ2pCLFVBQUUsU0FBUyxDQUFDLEVBQUUsWUFBWSxDQUFDO0FBQUEsTUFDNUI7QUFBQSxJQUNELENBQUMsR0FBRSxHQUFHO0FBQUEsRUFDUDtBQUFBLEVBQ0EsV0FBVztBQUNWLGtCQUFjLEtBQUssUUFBUTtBQUFBLEVBQzVCO0FBQ0Q7IiwKICAibmFtZXMiOiBbXQp9Cg==
